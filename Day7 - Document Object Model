Document Object Model (DOM) in JavaScript
The Document Object Model (DOM) is a programming interface for web documents. 
It represents the structure of a web page as a tree-like structure, allowing programs to manipulate its content, structure, and styles.

Key Points:
Definition:

The DOM is a tree representation of an HTML or XML document.
It allows JavaScript to dynamically interact with and modify the web page.
Hierarchy:

The DOM is a hierarchy starting with the document object as the root.
Nodes represent HTML elements, attributes, text, and comments.

Core Concepts:

Nodes: Each element in the DOM tree is a node (e.g., element nodes, text nodes).
Elements: Represent HTML tags like <div>, <p>.

Attributes: Represent element properties (e.g., id, class).

Common DOM Objects:

document: Represents the entire HTML document.
window: Represents the browser window and provides access to the DOM.
navigator: Contains browser information.

Accessing DOM Elements:

document.getElementById('id'): Selects an element by its id.
document.getElementsByClassName('class'): Selects elements by class.
document.querySelector('selector'): Selects the first matching element.
document.querySelectorAll('selector'): Selects all matching elements.

Manipulating DOM Elements:

Change Content: element.innerHTML = 'New Content';
Change Style: element.style.color = 'blue';

Add/Remove Elements:
element.appendChild(newElement);
element.removeChild(childElement);

Event Handling:

DOM enables interaction through events like click, mouseover, and keydown.
Example:

document.getElementById('btn').addEventListener('click', function() {
    alert('Button Clicked!');
});

Traversal and Modification:

Navigate the DOM tree using properties like parentNode, childNodes, firstChild, lastChild, nextSibling.
Example:
let parent = document.getElementById('child').parentNode;
Dynamic Changes:

The DOM allows creating, modifying, or deleting elements dynamically to create interactive web applications.
Importance:

Facilitates interaction between JavaScript and the web page.
Essential for implementing client-side interactivity.
Example:
html
Copy code
<!DOCTYPE html>
<html>
<body>
  <h1 id="heading">Hello, World!</h1>
  <button onclick="changeText()">Click Me</button>

  <script>
    function changeText() {
      document.getElementById('heading').innerHTML = 'Hello, JavaScript!';
    }
  </script>
</body>
</html>

This demonstrates how the DOM enables real-time manipulation of web content.
